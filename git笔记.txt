git pull的用法：
git pull <远程名> <远程分支名>:<本地分支名>
比如：张三管理整个项目的master分支，他每天下班前将dev1,dev2,dev3三个分支merge到master分支上，然后推送到远程master分支。
	李四管理着dev1分支，他每天上班前将master分支上dev2,dev3更新的东西同步到dev1上。此时处理方式就是git origin master:dev1
	如果是本地dev1分支想要拿到远程dev1分支的更新,并且本地dev1和远程dev1分支建立追踪关系。我们只需要git pull就好了。

多人合作开发：
问题一：比如有个远程分支dev,张三在本地建立一个dev分支和远程dev关联，李四也在本地建立一个dev分支和远程dev关联，当张三提交并且push到远程dev分支，
李四也想提交并且push到远程dev分支，此时会报错，李四需要pull远程dev分支，如果两人修改的东西有重叠的话需要解决冲突提交后才能push。没有冲突的话直接push.

问题二：同样的张三和李四都在本地创建dev分支和远程dev分支相对应，张三已经push了，李四手中的活还没做完但是想要获取最新的远程dev分支此时李四做法：
	做法一：直接用git checkout -- <file> 放弃本地的修改
	做法二：将修改的东西commit,然后pull，会自动将你做的修改和拉下来的代码合并。
	做法三：git stash暂存你的修改,此时git pull后就是远程dev的代码了，如果可以用git stash pop将你的代码取出来合并到拉下来的代码中。




